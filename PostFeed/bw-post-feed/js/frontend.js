"use strict"; var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } (function ($) { PostFeed = function () { function PostFeed(settings) { _classCallCheck(this, PostFeed); this.element = settings.element; this.posts = settings.posts; this.filteredPosts = this.posts; this.defaultImage = settings.defaultImage; this.postsPerPage = settings.postsPerPage; this.initPostPerPage = settings.postsPerPage; this.init(); } _createClass(PostFeed, [{ key: "init", value: function init() { var _this = this; $(".list-button").click(function () { _this.changeNumberOfPosts(8); }); $(".grid-button").click(function () { console.log("GRID-BUTTON"); _this.changeNumberOfPosts(_this.initPostPerPage); }); window.addEventListener("load", function () { _this.buildPagination(_this.filteredPosts); _this.showDropdown(); _this.handleFilterClick(); _this.handleGridListClick(); }); } }, { key: "buildPagination", value: function buildPagination(data) { var _this2 = this; $(this.element).find(".pagination").pagination({ dataSource: data, pageSize: this.postsPerPage, callback: function callback(d, pagination) { var postHTML = []; for (var i = 0; i < d.length; i++) { var post = d[i]; var image = void 0; if (!post.image || post.image === "") { image = _this2.defaultImage; } else { image = post.image; } var html = "<a class='post' href='" + post.permLink + "'>\n\t\t\t\t\t\t\t\t\t\t<div class='image-container'>\n <img class='img-class' src='" + image + "' />\n </div>\n\t\t\t\t\t\t\t\t\t\t<div class='post-content'>\n <h3 class='post-title'>" + post.title + "</h3>\n <div class='post-author'> " + post.post_author + "</div>\n <div class='post-excerpt'>" + post.excerpt + "</div>\n </div>\n\t\t\t\t\t\t\t\t\t</a>"; postHTML.push(html); } _this2.element.querySelector(".post-container").innerHTML = postHTML.join(""); } }); var numberOfPages = this.element.querySelectorAll(".paginationjs-page").length; if (numberOfPages < 2) { this.element.querySelector(".paginationjs").style.display = "none"; } else { this.element.querySelector(".paginationjs").style.display = "block"; } this.handleNextPrevClick(); } }, { key: "changeNumberOfPosts", value: function changeNumberOfPosts(numberOfPosts) { this.postsPerPage = numberOfPosts; this.buildPagination(this.filteredPosts); } }, { key: "handleNextPrevClick", value: function handleNextPrevClick() { var _this3 = this; $(".paginationjs-next").click(function () { _this3.scrollToTop(); setTimeout(function () { _this3.handleNextPrevClick(); }, 500); }); $(".paginationjs-prev").click(function () { _this3.scrollToTop(); setTimeout(function () { _this3.handleNextPrevClick(); }, 500); }); $(".paginationjs-page").click(function () { _this3.scrollToTop(); setTimeout(function () { _this3.handleNextPrevClick(); }, 500); }); } }, { key: "scrollToTop", value: function scrollToTop() { var top = $('.post-container').offset().top - 300; $('body,html').animate({ scrollTop: top }, 600); } }, { key: "showDropdown", value: function showDropdown() { var cat = this.element.querySelector(".category-dropdown"); var catList = this.element.querySelector(".categories"); cat.addEventListener("click", function () { catList.classList.toggle("active"); }); document.body.addEventListener("click", function (e) { if (!e.target.classList.contains('cat')) { catList.classList.remove('active'); } }); } }, { key: "handleFilterClick", value: function handleFilterClick() { var _this4 = this; var cats = this.element.querySelectorAll(".category"); var _loop = function _loop(i) { cats[i].addEventListener("click", function () { var filter = cats[i].dataset.filter; _this4.filterData(filter); if (filter === 'All') { _this4.element.querySelector(".cat-label").innerText = 'All'; } else { _this4.element.querySelector(".cat-label").innerText = filter; } }); }; for (var i = 0; i < cats.length; i++) { _loop(i); } } }, { key: "filterData", value: function filterData(filter) { var filteredPosts = []; if (filter == 'All') { this.filteredPosts = this.posts; } else { for (var i = 0; i < this.posts.length; i++) { if (filter == this.posts[i].post_tag) { filteredPosts.push(this.posts[i]); } if (filter == this.posts[i].tag) { filteredPosts.push(this.posts[i]); } } this.filteredPosts = filteredPosts; } this.buildPagination(this.filteredPosts); } }, { key: "handleGridListClick", value: function handleGridListClick() { var gridButton = this.element.querySelector(".grid-button"); var listButton = this.element.querySelector(".list-button"); var postContainer = this.element.querySelector(".post-container"); gridButton.addEventListener("click", function () { postContainer.classList.add("grid-view"); postContainer.classList.remove("list-view"); gridButton.classList.add("active"); listButton.classList.remove("active"); }); listButton.addEventListener("click", function () { postContainer.classList.remove("grid-view"); postContainer.classList.add("list-view"); gridButton.classList.remove("active"); listButton.classList.add("active"); }); } }]); return PostFeed; }(); })(jQuery);