"use strict"; var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } (function ($) { CategoryFeed = function () { function CategoryFeed(settings) { _classCallCheck(this, CategoryFeed); this.element = settings.element; this.categories = settings.categories; this.filteredPosts = this.categories; this.defaultImage = settings.defaultImage; this.postsPerPage = settings.postsPerPage; this.initPostPerPage = settings.postsPerPage; this.init(); } _createClass(CategoryFeed, [{ key: "init", value: function init() { var _this = this; window.addEventListener("load", function () { _this.buildPagination(_this.filteredPosts); }); } }, { key: "buildPagination", value: function buildPagination(data) { var _this2 = this; $(this.element).find(".pagination").pagination({ dataSource: data, pageSize: this.postsPerPage, callback: function callback(d, pagination) { var postHTML = []; for (var i = 0; i < d.length; i++) { var category = d[i]; var image = void 0; if (!category.image || category.image === "") { image = _this2.defaultImage; } else { image = category.image; } var html = "<a class='category' href='" + category.link + "'>\n <div class='image-container'>\n <img class='img-class' src='" + image + "' />\n <div class='category-content'>\n <h3 class='category-title'>" + category.cat_name + "</h3>\n <div class='category-excerpt'>" + category.category_description + "</div>\n </div>\n </div>\n </a>"; postHTML.push(html); } _this2.element.querySelector(".category-container").innerHTML = postHTML.join(""); } }); var numberOfPages = this.element.querySelectorAll(".paginationjs-page").length; if (numberOfPages < 2) { this.element.querySelector(".paginationjs").style.display = "none"; } else { this.element.querySelector(".paginationjs").style.display = "block"; } this.handleNextPrevClick(); } }, { key: "handleNextPrevClick", value: function handleNextPrevClick() { var _this3 = this; $(".paginationjs-next").click(function () { _this3.scrollToTop(); setTimeout(function () { _this3.handleNextPrevClick(); }, 500); }); $(".paginationjs-prev").click(function () { _this3.scrollToTop(); setTimeout(function () { _this3.handleNextPrevClick(); }, 500); }); $(".paginationjs-page").click(function () { _this3.scrollToTop(); setTimeout(function () { _this3.handleNextPrevClick(); }, 500); }); } }, { key: "scrollToTop", value: function scrollToTop() { var top = $('.category-container').offset().top - 300; $('body,html').animate({ scrollTop: top }, 600); } }]); return CategoryFeed; }(); })(jQuery);